import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

public class Main_1219_오민식의고민 {
	static final int INF = 100000000;
	
	public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        int n = Integer.parseInt(st.nextToken());
        int start = Integer.parseInt(st.nextToken());
        int end = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        
        st = new StringTokenizer(br.readLine(), " ");
        int earn[] = new int[n];
        for(int i = 0; i < n; i++) {
        	earn[i] = Integer.parseInt(st.nextToken());
        }
        
        List<Edge> list = new ArrayList<>();
        for(int i = 0; i < m; i++) {
        	st = new StringTokenizer(br.readLine(), " ");
        	list.add(new Edge(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())));
        }
        
        long dist[] = new long[n+1];
        Arrays.fill(dist, INF);
        dist[start] = earn[start];
        
        for(int i = 0; i < n-1; i++) {
        	boolean updated = false;
        	
        	for(Edge out : list) {
        		if(dist[out.start] != INF && dist[out.start] - out.w + earn[out.end] < dist[out.end]) {
        			dist[out.end] = dist[out.start] - out.w + earn[out.end];
        			updated = true;
        		}
        	}
        	
        	if(!updated) {
        		break;
        	}
        }
        
        if(dist[end] == INF) {
        	System.out.println("gg");
        	return;
        }
        
        for(Edge out : list) {
    		if(dist[out.start] != INF && dist[out.start] + out.w < dist[out.end]) {
    			System.out.println("Gee");
    			return;
    		}
    	}
        
        System.out.println(dist[end]);
	}
	
	static class Edge {
		int start, end, w;
		
		public Edge(int start, int end, int w) {
			this.start = start;
			this.end = end;
			this.w = w;
		}
	}
}