import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_33933_인덕이와산책 {
	static final int INF = 100000000;
	
	static int n, m, t;
	static int[] cycle;
	static List<List<Integer>> list = new ArrayList<>();
	static int[][] cost;

	public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        t = Integer.parseInt(st.nextToken());
        
        for(int i = 0; i <= n; i++) {
        	list.add(new ArrayList<>());
        }
        
        for(int i = 0; i < m; i++) {
        	st = new StringTokenizer(br.readLine(), " ");
        	int start = Integer.parseInt(st.nextToken());
        	int end = Integer.parseInt(st.nextToken());
        	
        	list.get(start).add(end);
        	list.get(end).add(start);
        }
        
        cycle = new int[t+1];
        st = new StringTokenizer(br.readLine(), " ");
        for(int i = 1; i <= t; i++) {
        	cycle[i] = Integer.parseInt(st.nextToken());
        }
        cycle[0] = cycle[t];
        
        bfs(1);
	}

	private static void bfs(int i) {
		Queue<int[]> q = new ArrayDeque<>();
		cost = new int[n+1][t];
		
		for(int j = 1; j <= n; j++) {
			Arrays.fill(cost[j], INF);
		}
		
		cost[i][0] = 0;
		q.offer(new int[] {i, 0});
		
		while(!q.isEmpty()) {
			int[] poll = q.poll();
			
			if(poll[0] == n) {
				System.out.println(poll[1]);
				return;
			}
			
			int temp = (poll[1]+1) % t;
			if(cost[poll[0]][temp] > poll[1]+1) {
				if(poll[0] == cycle[temp]) {
					int idx = 1;
					
					while(cycle[temp++] != n) {
						idx++;
					}
					System.out.println("me?");
					System.out.println(idx+poll[1]);
					return;
				} else {
					q.offer(new int[] {poll[0], poll[1]+1});
					cost[poll[0]][temp] = poll[1]+1;
				}
			}
			
			for(int out : list.get(poll[0])) {
				if(cost[out][temp] > poll[1]+1) {
					if(out == cycle[temp]) {
						int idx = 1;
						
						while(cycle[temp++] != n) {
							idx++;
						}
						
						System.out.println(idx+poll[1]);
						return;
					} else {
						q.offer(new int[] {out, poll[1]+1});
						cost[out][temp] = poll[1]+1;
					}
				}
			}
		}
		
		System.out.println(-1);
	}
}