import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_1005_ACMCraft {
	static int n, m, result;
	static List<List<Integer>> list;;
	static int req[];
	static int top[];
	
	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int T = Integer.parseInt(br.readLine());
        
        StringTokenizer st;
        for(int t = 0; t < T; t++) {
        	st = new StringTokenizer(br.readLine(), " ");
        	n = Integer.parseInt(st.nextToken());
        	m = Integer.parseInt(st.nextToken());
        	result = 0;
        	
        	top = new int[n+1];
        	req = new int[n+1];
        	
        	list = new ArrayList<>();
        	for(int i = 0; i <= n; i++) {
            	list.add(new ArrayList<>());
            }
        	
        	st = new StringTokenizer(br.readLine(), " ");
        	for(int i = 1; i <= n; i++) {
        		req[i] = Integer.parseInt(st.nextToken());
        	}
            
            for(int i = 0; i < m; i++) {
            	st = new StringTokenizer(br.readLine(), " ");
            	int start = Integer.parseInt(st.nextToken());
            	int end = Integer.parseInt(st.nextToken());
            	
            	list.get(start).add(end);
            	
            	top[end]++;
            }
            
            int target = Integer.parseInt(br.readLine());
            
            topologicalSort(target);
            
            sb.append(result+"\n");
        }

        System.out.println(sb.toString().trim());
	}

	private static void topologicalSort(int target) {
		Queue<int[]> q = new ArrayDeque<>();
		
		for(int i = 1; i <= n; i++) {
			if(top[i] == 0) {
				q.offer(new int[] {i, 0});
			}
		}
		
		while(!q.isEmpty()) {
			int[] poll = q.poll();
			
			int max = 0;
			for(int out : list.get(poll[0])) {
				top[out]--;
				if(top[out] == 0) {
					q.offer(new int[] {out, poll[1]+1});
					max = Math.max(req[out], max);
				}
			}
			
			result += max;
		}
	}
}